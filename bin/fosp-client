#!/usr/bin/env node
// vim: set filetype=javascript
// more or less simple example client
var events = require('events')
var readline = require('readline');
var sprintf = require('sprintf').sprintf;
var fs = require('fs');
var path = require('path')
var basePath = path.join(path.dirname(fs.realpathSync(__filename)), '..')
var fosp = require(path.join(basePath, 'lib/fosp'));
var L = require(path.join(basePath, 'lib/logger')).forFile(__filename);

var ExampleClient = function(configFile) {
  var self = this;
  self.config = JSON.parse(fs.readFileSync(configFile || 'client.conf'));
  self.rl = readline.createInterface({ input: process.stdin, output: process.stdout });
  self.client = new fosp.Client({host: self.config.user.domain});

  L.info('Starting client');
  self.client.on('connect', function() {
    L.info('Established connection');
    L.info('Negotiating version');
    self.client.con.sendConnect({}, {version: "0.1"}).on('failed', function(resp) {
      L.info('Failed to negotiate connection');
      L.warn(resp.toString());
      L.warn('Exiting');
      exit(1);
    }).on('succeeded', function(resp) {
      L.info('Successfully negotiated connection!')
      L.info('Authenticating ...')
      self.client.con.sendAuthenticate({}, { name: self.config.user.name, password: self.config.user.password }).on('failed', function(resp) {
        L.warn('Authenticating failed, try again yourself (use "authenticate")');
        self.prompt()
      }).on('succeeded', function(resp) {
        L.info('Succesfully authenticated!');
        self.prompt()
      });
    });

    self.client.con.on('error', function(msg) {
      console.log();
      L.error(msg);
      process.exit(1);
    });
    self.client.con.on('close', function() {
      console.log();
      L.warn('Connection closed');
      process.exit(1);
    });
    self.client.con.on('created', function(msg) {
      self.emit('created', msg)
    })
    self.client.con.on('updated', function(msg) {
      self.emit('updated', msg)
    })
    self.client.con.on('deleted', function(msg) {
      self.emit('deleted', msg)
    })
  });

  self.rl.on('line', function(line) {
    var params = line.split(' ');
    var command = params.shift();
    var validCommands = ['cd','pwd','exit','register','authenticate',
                         'select','create','update','delete','list',
                         'allow', 'deny', 'subscribe', 'unsubscribe', 'read', 'write'];
    if (validCommands.indexOf(command) >= 0)
      self.emit(command, params)
    else
      self.emit('unknown-command')
  });
}

ExampleClient.prototype = Object.create(events.EventEmitter.prototype)

ExampleClient.prototype.prompt = function() {
  this.rl.setPrompt(this.config.user.name +'@' + this.config.user.domain + ' on ' + this.config.cwd + '>');
  this.rl.prompt();
}

ExampleClient.prototype.cd = function(path) {
  var dirs = path.split('/');
  var oldCwd = this.config.cwd;
  for (var i=0; i<dirs.length; i++) {
    var dir = dirs[i];
    if (dir == '..') {
      var cwdDirs = this.config.cwd.split('/');
      if (cwdDirs.length > 1) {
        cwdDirs.pop();
        this.config.cwd = cwdDirs.join('/');
      }
      else {
        L.error('Already at the root of tree');
        this.config.cwd = oldCwd;
        break;
      }
    }
    else if (dir == '.') {
      continue;
    }
    else if (dir.match(/^[a-zA-Z][a-zA-Z0-9_\-+.]*@[a-zA-Z0-9._\-+]+$/) && i == 0) {
      this.config.cwd = dir;
    }
    else if (dir.match(/^[a-zA-Z][a-zA-Z0-9+_\-.]*$/)) {
      this.config.cwd += "/" + dir;
    }
    else {
      L.error('Invalid dir ' + dir);
      this.config.cwd = oldCwd;
      break;
    }
  }
};

ExampleClient.prototype.formatResponsePrompt = function(req, succeeded, failed, timeout) {
  var self = this;
  succeeded = (typeof succeeded === 'string') ? succeeded : "Request %(request)s was successful: %(response_body)s";
  failed = (typeof failed === 'string') ? failed : "Request %(request)s failed: %(response_status)s :: %(response_body)s";
  timeout = (typeof timeout === 'string') ? timeout : "Request %(request)s timed out";


  req.on('succeeded', function(resp) {
    var vars = { request: req.request,
                 response_status: resp.status,
                 response_body: JSON.stringify(resp.body)
    }
    console.log(sprintf(succeeded, vars));
    self.prompt();
  });
  req.on('failed', function(resp) {
    var vars = { request: req.request,
                 response_status: resp.status,
                 response_body: JSON.stringify(resp.body)
    }
    L.warn(sprintf(failed, vars));
    self.prompt();
  });
  req.on('timeout', function(resp) {
    var vars = { request: req.request }
    L.warn(sprintf(timeout, vars));
    self.prompt();
  });
}

ExampleClient.prototype.paramsDefined = function() {
  for (arg in arguments) {
    if (typeof arg === 'undefined' || arg === null) {
      L.error('Missing parameters');
      return false;
    }
  }
  return true;
}

ExampleClient.prototype.tmpCd = function(path, func) {
  var oldCwd = this.config.cwd;
  this.cd(path);
  func.call(this, this.config.cwd);
  this.config.cwd = oldCwd;
}

ExampleClient.prototype.unariOperation = function(params, func) {
  var path = params[0];
  if (typeof path === 'undefined' || path === '')
    path = '.'
  this.tmpCd(path, function(dir) {
    func.call(this, dir);
  });
}

ExampleClient.prototype.userOperation = function(params, func) {
  var name = params[0], password = params[1];
  if (! this.paramsDefined(name, password) )
    return;
  this.formatResponsePrompt(func(name, password));
}

var fospClient = new ExampleClient(process.argv[2]);

fospClient.on('exit', function() {
  L.info('Exiting')
  process.exit(0)
});

fospClient.on('pwd', function() {
  console.log(this.config.cwd)
  this.prompt()
});

fospClient.on('cd', function(params) {
  var path = params[0];
  if (this.paramsDefined(path)) {
    this.cd(path);
    this.prompt();
  }
});

fospClient.on('register', function(params) {
  var self = this
  this.userOperation(params, function(name, password) {
    return self.client.con.sendRegister({}, {name: name, password: password });
  });
})

fospClient.on('authenticate', function(params) {
  var self = this
  this.userOperation(params, function(name, password) {
    return self.client.con.sendAuthenticate({}, { name: name, password: password });
  });
})

fospClient.on('select', function(params) {
  this.unariOperation(params, function(dir) {
    this.formatResponsePrompt(this.client.con.sendSelect(dir), "%(response_body)s")
  });
});

fospClient.on('delete', function(params) {
  this.unariOperation(params, function(dir) {
    this.formatResponsePrompt(this.client.con.sendDelete(dir));
  });
})

fospClient.on('list', function(params) {
  this.unariOperation(params, function(dir) {
    this.formatResponsePrompt(this.client.con.sendList(dir), '%(response_body)s');
  });
})

fospClient.on('create', function(params) {
  var path = params.shift(), body = JSON.parse(params.join(' ')), self = this;
  if (! this.paramsDefined(path, body) )
    return;
  self.tmpCd(path, function(dir) {
    self.formatResponsePrompt(self.client.con.sendCreate(dir, {}, {data: body}))
  });
})

fospClient.on('update', function(params) {
  var path = params.shift(), body = JSON.parse(params.join(' ')), self = this;
  if (! this.paramsDefined(path, body) )
    return;
  self.tmpCd(path, function(dir) {
    self.formatResponsePrompt(self.client.con.sendUpdate(dir, {}, {data: body}));
  });
})
fospClient.on('read', function(params) {
  var self = this, path = params.shift(), target = params.shift()
  if (! this.paramsDefined(path, target) )
    return;
  self.tmpCd(path, function(dir) {
    self.client.con.sendRead(dir).on('succeeded', function(resp) {
      L.info('Successfully read')
      fs.writeFile(target, resp.body, { encoding: 'binary' }, function(err) {
        if (err)
          L.error('Error writing to target file ' + target + ': ' + err)
        else
          L.info('Successfully written to file ' + target)
        fospClient.prompt()
      })
    }).on('failed', function(resp) {
      L.warn('Read failed: ' + resp.body)
      fospClient.prompt()
    })
  });
})
fospClient.on('write', function(params) {
  var self = this, path = params.shift(), source = params.shift(), buffer
  if (! this.paramsDefined(path, source) )
    return;
  try {
    buffer = fs.readFileSync(source)
  }
  catch(e) {
    L.error('Error reading file: ' + e)
    fospClient.prompt()
    return
  }
  self.tmpCd(path, function(dir) {
    self.client.con.sendWrite(dir, {}, buffer).on('succeeded', function(resp) {
      L.info('Successfully written')
      fospClient.prompt()
    }).on('failed', function(resp) {
      L.warn('Write failed: ' + resp.body)
      fospClient.prompt()
    })
  });
})

var permissions = ['data-read', 'data-write', 'acl-read', 'acl-write', 'subscriptions-read', 'subscriptions-write', 'children-read', 'children-write', 'children-delete', 'attachment-read', 'attachment-write']

fospClient.on('allow', function(params) {
  var self = this
  var path = params.shift()
  var user = this.config.user.name + '@' + this.config.user.domain
  if (params[params.length - 1].match(/[a-zA-Z][a-zA-Z0-9._\-+]*@[a-zA-Z0-9._\-+]/))
    user = params.pop()
  for (var i=0; i<params.length; i++) {
    if (permissions.indexOf(params[i]) < 0) {
      L.error(params[i] + ' is not a valid permission')
      return
    }
  }
  var payload = { acl: {} }
  payload.acl[user] = params
  self.tmpCd(path, function(dir) {
    self.formatResponsePrompt(self.client.con.sendUpdate(dir, {}, payload))
  })
})

fospClient.on('deny', function(params) {
  var self = this
  var path = params.shift()
  var user = this.config.user.name + '@' + this.config.user.domain
  if (params[params.length -1 ].match(/[a-zA-Z][a-zA-Z0-9._\-+]*@[a-zA-Z0-9._\-+]/))
    user = params.pop()
  var perms = []
  for (var i=0; i<params.length; i++) {
    if (permissions.indexOf(params[i]) < 0) {
      L.error(params[i] + ' is not a valid permission')
      return
    }
    perms.push('not-' + params[i])
  }
  var payload = { acl: {} }
  payload.acl[user] = perms
  self.tmpCd(path, function(dir) {
    self.formatResponsePrompt(self.client.con.sendUpdate(dir, {}, payload))
  })
})

var events = ['created', 'updated', 'deleted']

fospClient.on('subscribe', function(params) {
  var self = this
  var user = this.config.user.name + '@' + this.config.user.domain
  var path = params.shift()
  var depth = parseInt(params.shift())
  if (isNaN(depth) || depth < -1) {
    L.error('No valid depth provided')
    self.prompt()
    return
  }
  for (var i=0; i<params.length; i++) {
    if(events.indexOf(params[i]) < 0) {
      L.error('Invalid event ' + params[i])
      self.prompt()
      return
    }
  }
  var payload = { subscriptions: {} }
  payload.subscriptions[user] = { events: params, depth: depth }
  self.tmpCd(path, function(dir) {
    self.formatResponsePrompt(self.client.con.sendUpdate(dir, {}, payload))
  })
})

fospClient.on('unsubscribe', function(params) {
  var self = this
  var user = this.config.user.name + '@' + this.config.user.domain
  var path = params.shift()
  var payload = { subscriptions: {} }
  payload.subscriptions[user] = null
  self.tmpCd(path, function(dir) {
    self.formatResponsePrompt(self.client.con.sendUpdate(dir, {}, payload))
  })
})

fospClient.on('created', function(msg) {
  console.log()
  console.log(msg.uri + ' has been created: ' + JSON.stringify(msg.body.data))
  this.prompt()
})

fospClient.on('updated', function(msg) {
  console.log()
  console.log(msg.uri + ' has been updated: ' + JSON.stringify(msg.body.data))
  this.prompt()
})

fospClient.on('deleted', function(msg) {
  console.log()
  console.log(msg.uri + ' has been deleted')
  this.prompt()
})
